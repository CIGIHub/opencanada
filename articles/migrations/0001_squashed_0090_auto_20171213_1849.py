# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-07-11 12:42
from __future__ import unicode_literals

import articles.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import interactives.models
import modelcluster.fields
import themes.models
import wagtail.contrib.wagtailroutablepage.models
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtaildocs.blocks
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# articles.migrations.0003_initial_pages
# articles.migrations.0006_create_topics_page
# articles.migrations.0008_create_categories
# articles.migrations.0016_create_colours
# articles.migrations.0022_create_feature_styles
# articles.migrations.0066_assign_theme_to_pages
# articles.migrations.0068_auto_20151006_2148

class Migration(migrations.Migration):

    replaces = [('articles', '0001_initial'), ('articles', '0002_articleauthorlink_author'), ('articles', '0003_initial_pages'), ('articles', '0004_headline'), ('articles', '0005_auto_20150626_1948'), ('articles', '0006_create_topics_page'), ('articles', '0007_auto_20150702_1954'), ('articles', '0008_create_categories'), ('articles', '0009_auto_20150706_1526'), ('articles', '0010_auto_20150706_1547'), ('articles', '0011_seriespage_subtitle'), ('articles', '0012_auto_20150707_2303'), ('articles', '0015_auto_20150715_1553'), ('articles', '0016_create_colours'), ('articles', '0017_auto_20150715_1554'), ('articles', '0015_remove_articlepage_subtitle'), ('articles', '0018_merge'), ('articles', '0019_auto_20150715_1948'), ('articles', '0020_auto_20150715_2006'), ('articles', '0021_auto_20150716_2116'), ('articles', '0022_create_feature_styles'), ('articles', '0023_auto_20150716_2129'), ('articles', '0024_auto_20150722_1928'), ('articles', '0025_auto_20150724_1517'), ('articles', '0026_auto_20150728_1823'), ('articles', '0027_externalarticlelistpage'), ('articles', '0025_auto_20150724_1721'), ('articles', '0026_merge'), ('articles', '0028_merge'), ('articles', '0029_auto_20150805_2109'), ('articles', '0029_auto_20150811_1924'), ('articles', '0030_articlecategory_include_main_image'), ('articles', '0031_auto_20150812_2002'), ('articles', '0032_auto_20150813_1359'), ('articles', '0033_articlepage_last_updated'), ('articles', '0034_auto_20150813_1728'), ('articles', '0035_auto_20150813_1802'), ('articles', '0030_auto_20150806_2136'), ('articles', '0031_merge'), ('articles', '0036_merge'), ('articles', '0037_articlepage_hide_author_block'), ('articles', '0038_auto_20150814_1920'), ('articles', '0039_auto_20150814_1922'), ('articles', '0038_auto_20150814_1826'), ('articles', '0040_merge'), ('articles', '0041_auto_20150814_2011'), ('articles', '0042_externalarticlelistpage_articles_per_page'), ('articles', '0043_auto_20150818_1833'), ('articles', '0044_articlelistpage_filter_for_visualizations'), ('articles', '0045_seriespage_include_main_image'), ('articles', '0046_articlepage_include_main_image_overlay'), ('articles', '0047_topiclistpage_articles_per_page'), ('articles', '0048_articlepage_interview'), ('articles', '0049_articlelistpage_filter_for_interviews'), ('articles', '0050_auto_20150901_2041'), ('articles', '0051_auto_20150903_0059'), ('articles', '0052_articlepage_full_bleed_image_size'), ('articles', '0053_auto_20150903_1738'), ('articles', '0054_seriespage_short_description'), ('articles', '0055_auto_20150903_2116'), ('articles', '0056_auto_20150903_2132'), ('articles', '0057_articlelistpage_filter'), ('articles', '0058_auto_20150904_0245'), ('articles', '0059_auto_20150923_1524'), ('articles', '0060_auto_20150925_2012'), ('articles', '0061_auto_20150928_1913'), ('articles', '0062_auto_20150930_1633'), ('articles', '0063_auto_20150930_1924'), ('articles', '0062_auto_20150930_1906'), ('articles', '0064_merge'), ('articles', '0065_make_pages_themeable'), ('articles', '0066_assign_theme_to_pages'), ('articles', '0067_auto_20151005_2045'), ('articles', '0068_auto_20151006_2148'), ('articles', '0069_articlebackgroundimagelink'), ('articles', '0070_auto_20151013_1900'), ('articles', '0071_auto_20151013_1911'), ('articles', '0072_auto_20151013_2006'), ('articles', '0073_auto_20151013_2024'), ('articles', '0074_auto_20151015_1726'), ('articles', '0075_auto_20151015_2022'), ('articles', '0076_articlepage_video_document'), ('articles', '0077_seriespage_video_document'), ('articles', '0078_articlepage_video'), ('articles', '0079_auto_20151126_1433'), ('articles', '0080_auto_20151126_1456'), ('articles', '0081_auto_20151126_1503'), ('articles', '0082_auto_20151208_2116'), ('articles', '0083_auto_20151208_2156'), ('articles', '0084_auto_20151209_0154'), ('articles', '0085_articlepage_json_file'), ('articles', '0086_articlepage_project'), ('articles', '0087_seriespage_project'), ('articles', '0088_responsearticlelink'), ('articles', '0089_auto_20161205_1426'), ('articles', '0090_auto_20171213_1849')]

    initial = True

    dependencies = [
        ('wagtailredirects', '0002_add_verbose_names'),
        ('contenttypes', '__latest__'),
        ('wagtaildocs', '0003_add_verbose_names'),
        ('images', '0002_auto_20150923_1943'),
        ('people', '0001_initial'),
        ('wagtailcore', '0019_verbose_names_cleanup'),
        ('analytics', '0001_initial'),
        ('content_notes', '0003_auto_20150930_2002'),
        ('newsletter', '0015_newsletterexternalarticlelink2'),
        ('wagtailcore', '0001_squashed_0016_change_page_url_path_to_text_field'),
        ('themes', '0006_create_themes'),
        ('wagtailimages', '0006_add_verbose_names'),
        ('wagtailforms', '0002_add_verbose_names'),
        ('images', '0001_initial'),
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArticleAuthorLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('subtitle', wagtail.wagtailcore.fields.RichTextField(blank=True, default='')),
                ('body', articles.fields.BodyField((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Document', wagtail.wagtailcore.blocks.StructBlock((('document', wagtail.wagtaildocs.blocks.DocumentChooserBlock()),))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Overflow', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('FullBleed', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),))), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive, icon='cogs')), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))))),
                ('excerpt', wagtail.wagtailcore.fields.RichTextField(blank=True, default='')),
                ('main_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ArticleTopicLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_links', to='articles.ArticlePage')),
            ],
        ),
        migrations.CreateModel(
            name='SeriesArticleLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('override_text', wagtail.wagtailcore.fields.RichTextField(blank=True, default='', help_text='This field is optional. If not provided, the text will be pulled from the article page automatically. This field allows you to override the automatic text.')),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='series_links', to='articles.ArticlePage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeriesListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SeriesPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', articles.fields.BodyField((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Document', wagtail.wagtailcore.blocks.StructBlock((('document', wagtail.wagtaildocs.blocks.DocumentChooserBlock()),))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Overflow', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('FullBleed', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),))), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive, icon='cogs')), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), blank=True, default='')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
        ),
        migrations.AddField(
            model_name='seriespage',
            name='primary_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.Topic'),
        ),
        migrations.AddField(
            model_name='seriesarticlelink',
            name='series',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_article_links', to='articles.SeriesPage'),
        ),
        migrations.AddField(
            model_name='seriesarticlelink',
            name='override_image',
            field=models.ForeignKey(blank=True, help_text='This field is optional. If not provided, the image will be pulled from the article page automatically. This field allows you to override the automatic image.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
        migrations.AddField(
            model_name='articletopiclink',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_links', to='articles.Topic'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='primary_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.Topic'),
        ),
        migrations.AddField(
            model_name='articleauthorlink',
            name='article',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_links', to='articles.ArticlePage'),
        ),
        migrations.AddField(
            model_name='articleauthorlink',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='article_links', to='people.ContributorPage'),
        ),
        migrations.RunPython(
            code=articles.migrations.0003_initial_pages.create_pages,
        ),
        migrations.CreateModel(
            name='Headline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('containing_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historic_headlines', to='wagtailcore.Page')),
                ('featured_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page')),
            ],
        ),
        migrations.CreateModel(
            name='TopicListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.AddField(
            model_name='topic',
            name='slug',
            field=models.SlugField(blank=True, max_length=255, unique=True),
        ),
        migrations.RunPython(
            code=articles.migrations.0006_create_topics_page.create_pages,
        ),
        migrations.CreateModel(
            name='ArticleCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=1024)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='articlepage',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='articles.ArticleCategory'),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=articles.migrations.0008_create_categories.create_categories,
        ),
        migrations.AlterModelOptions(
            name='articlecategory',
            options={'verbose_name_plural': 'Article Categories'},
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage'),
        ),
        migrations.AlterField(
            model_name='seriesarticlelink',
            name='override_image',
            field=models.ForeignKey(blank=True, help_text='This field is optional. If not provided, the image will be pulled from the article page automatically. This field allows you to override the automatic image.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage'),
        ),
        migrations.RenameField(
            model_name='seriespage',
            old_name='image',
            new_name='main_image',
        ),
        migrations.AlterField(
            model_name='seriespage',
            name='main_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='subtitle',
            field=wagtail.wagtailcore.fields.RichTextField(blank=True, default=''),
        ),
        migrations.CreateModel(
            name='Colour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('hex_value', models.CharField(max_length=7)),
            ],
        ),
        migrations.RunPython(
            code=articles.migrations.0016_create_colours.create_colours,
        ),
        migrations.CreateModel(
            name='FontStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('font_size', models.FloatField(default=1, help_text='The size of the fonts in ems.')),
                ('line_size', models.FloatField(default=100, help_text='The line height as a percentage.')),
                ('text_colour', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.Colour')),
            ],
        ),
        migrations.AddField(
            model_name='articlepage',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=30, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='headline',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=30, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='font_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.FontStyle'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='image_overlay_color',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.Colour'),
        ),
        migrations.AddField(
            model_name='headline',
            name='font_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.FontStyle'),
        ),
        migrations.AddField(
            model_name='headline',
            name='image_overlay_color',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.Colour'),
        ),
        migrations.RemoveField(
            model_name='articlepage',
            name='subtitle',
        ),
        migrations.AddField(
            model_name='articlepage',
            name='sticky',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='sticky',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='font_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.FontStyle'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='image_overlay_color',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.Colour'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=30, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.CreateModel(
            name='FeatureStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('number_of_columns', models.IntegerField(default=1)),
                ('number_of_rows', models.IntegerField(default=1)),
                ('include_image', models.BooleanField(default=False)),
                ('overlay_text', models.BooleanField(default=False)),
            ],
        ),
        migrations.RunPython(
            code=articles.migrations.0022_create_feature_styles.create_styles,
        ),
        migrations.AddField(
            model_name='articlepage',
            name='feature_style',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle'),
        ),
        migrations.AddField(
            model_name='headline',
            name='feature_style',
            field=models.ForeignKey(default=2, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='feature_style',
            field=models.ForeignKey(default=2, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle'),
        ),
        migrations.AlterModelOptions(
            name='topic',
            options={'ordering': ['name']},
        ),
        migrations.AlterModelOptions(
            name='articlecategory',
            options={'ordering': ['name'], 'verbose_name_plural': 'Article Categories'},
        ),
        migrations.AlterModelOptions(
            name='colour',
            options={'ordering': ['name']},
        ),
        migrations.CreateModel(
            name='ExternalArticlePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('sticky', models.BooleanField(default=False)),
                ('image_overlay_opacity', models.PositiveIntegerField(default=30, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
                ('website_link', models.URLField(max_length=255)),
                ('feature_style', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle')),
                ('font_style', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.FontStyle')),
                ('image_overlay_color', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.Colour')),
                ('main_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('website', models.URLField(max_length=255)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage')),
            ],
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='articles.Source'),
        ),
        migrations.CreateModel(
            name='ExternalArticleListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('articles_per_page', models.IntegerField(default=20)),
                ('theme', models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AlterModelOptions(
            name='colour',
            options={'ordering': ['name']},
        ),
        migrations.CreateModel(
            name='ChapteredArticlePage',
            fields=[
                ('articlepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='articles.ArticlePage')),
                ('end_notes', wagtail.wagtailcore.fields.StreamField((('end_note', wagtail.wagtailcore.blocks.StructBlock(((b'identifier', wagtail.wagtailcore.blocks.CharBlock()), (b'text', wagtail.wagtailcore.blocks.TextBlock())))),), blank=True, null=True)),
                ('works_cited', wagtail.wagtailcore.fields.StreamField((('citation', wagtail.wagtailcore.blocks.StructBlock(((b'text', wagtail.wagtailcore.blocks.TextBlock()),))),), blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('articles.articlepage',),
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articlepage', to='articles.ArticleCategory'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='editors_pick',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='editors_pick',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='editors_pick',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='feature_style',
            field=models.ForeignKey(default=2, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle'),
        ),
        migrations.AlterField(
            model_name='externalarticlepage',
            name='feature_style',
            field=models.ForeignKey(default=2, null=True, on_delete=django.db.models.deletion.SET_NULL, to='articles.FeatureStyle'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='cached_facebook_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='cached_twitter_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='cached_last_updated',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='cached_facebook_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='cached_last_updated',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='cached_twitter_count',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='primary_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='articles.Topic'),
        ),
        migrations.AlterField(
            model_name='seriespage',
            name='primary_topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='series', to='articles.Topic'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='include_author_block',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='include_main_image',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='articlelistpage',
            name='articles_per_page',
            field=models.IntegerField(default=20),
        ),
        migrations.AddField(
            model_name='serieslistpage',
            name='series_per_page',
            field=models.IntegerField(default=5),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='visualization',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='category',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articlepage', to='articles.ArticleCategory'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='include_main_image',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='include_main_image_overlay',
            field=models.BooleanField(default=False, help_text='Check to use a full-bleed image layout.', verbose_name='Use Main Image Full-Bleed Layout'),
        ),
        migrations.AddField(
            model_name='topiclistpage',
            name='articles_per_page',
            field=models.IntegerField(default=20),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='interview',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=45, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='externalarticlepage',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=45, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='headline',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=45, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='seriespage',
            name='image_overlay_opacity',
            field=models.PositiveIntegerField(default=45, help_text='Set the value from 0 (Solid overlay, original image not visible) to 100 (No overlay, original image completely visible)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='sticky_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='sticky_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='sticky_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='full_bleed_image_size',
            field=models.PositiveSmallIntegerField(default=75, help_text="Enter a value from 0 - 100, indicating the percentage of the screen to use for the full-bleed image layout. This value is only used if 'Use Main Image Full-Bleed Layout' is checked."),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='short_description',
            field=wagtail.wagtailcore.fields.RichTextField(blank=True, default=''),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='number_of_related_articles',
            field=models.PositiveSmallIntegerField(default=6, verbose_name='Number of Related Articles to Show'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='number_of_related_articles',
            field=models.PositiveSmallIntegerField(default=6, verbose_name='Number of Related Articles to Show'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='full_bleed_image_size',
            field=models.PositiveSmallIntegerField(default=75, help_text="Enter a value from 0 - 100, indicating the percentage of the screen to use for the full-bleed image layout. This value is only used if 'Use Main Image Full-Bleed Layout' is checked."),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='include_main_image_overlay',
            field=models.BooleanField(default=False, help_text='Check to use a full-bleed image layout.', verbose_name='Use Main Image Full-Bleed Layout'),
        ),
        migrations.AddField(
            model_name='articlelistpage',
            name='filter',
            field=models.TextField(blank=True, choices=[('visualizations', 'Visualizations'), ('interviews', 'Interviews'), ('editors_pick', "Editor's Pick"), ('most_popular', 'Most Popular')], null=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='theme',
            field=models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='theme',
            field=models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='chapters',
            field=articles.fields.ChapterField((('chapter', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock()), ('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('Overflow', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('FullBleed', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)),))), ('ColumnedContent', wagtail.wagtailcore.blocks.StructBlock((('body', wagtail.wagtailcore.blocks.StreamBlock((('Heading', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.CharBlock()), ('heading_level', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')]))))), ('Paragraph', wagtail.wagtailcore.blocks.StructBlock((('text', wagtail.wagtailcore.blocks.RichTextBlock()), ('use_dropcap', wagtail.wagtailcore.blocks.BooleanBlock(required=False))))), ('Image', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('placement', wagtail.wagtailcore.blocks.ChoiceBlock(choices=[('left', 'Left Aligned'), ('right', 'Right Aligned'), ('full', 'Full Width'), ('nocrop', 'Full Width - No Cropping')])), ('include_border', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('expandable', wagtail.wagtailcore.blocks.BooleanBlock(default=False, required=False)), ('label', wagtail.wagtailcore.blocks.CharBlock(help_text='Additional label to be displayed with the image.', required=False))))), ('Embed', wagtail.wagtailembeds.blocks.EmbedBlock(icon='site')), ('List', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.RichTextBlock(label='item'), icon='list-ul')), ('Sharable', articles.fields.SharableBlock()), ('PullQuote', articles.fields.PullQuoteBlock()), ('Quote', articles.fields.SimpleQuoteBlock()), ('Interactive', articles.fields.InteractiveBlock(interactives.models.Interactive)), ('RelatedItems', wagtail.wagtailcore.blocks.StructBlock((('heading', wagtail.wagtailcore.blocks.CharBlock(default='Related')), ('items', wagtail.wagtailcore.blocks.ListBlock(wagtail.wagtailcore.blocks.PageChooserBlock(label='item')))), icon='list-ul')), ('SectionBreak', wagtail.wagtailcore.blocks.StructBlock((('section_break', articles.fields.StaticHTMLBlock(raw_html='<hr>')),)))), required=False)),)))), required=False)), ('share_this_chapter', wagtail.wagtailcore.blocks.BooleanBlock(help_text='Check to include share links for this chapter for twitter and facebook.', required=False)), ('tweet_text', wagtail.wagtailcore.blocks.CharBlock(help_text='Tweet to share, including hashtags (if any); if empty the tweet will contain just the URL link to this chapter.', max_length=140, required=False))))),), blank=True, null=True),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='citations_heading',
            field=models.TextField(blank=True, default='Works Cited'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='endnote_identifier_style',
            field=models.CharField(choices=[('roman-lower', 'Roman Numerals - Lowercase'), ('roman-upper', 'Roman Numerals - Uppercase'), ('numbers', 'Numbers')], default='roman-lower', max_length=20),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='endnotes_heading',
            field=models.TextField(blank=True, default='End Notes'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='table_of_contents_heading',
            field=models.TextField(blank=True, default='Table of Contents'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='include_caption_in_footer',
            field=models.BooleanField(default=False, help_text='Check to display the image caption in the footer.', verbose_name='Show caption in footer'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='include_caption_in_footer',
            field=models.BooleanField(default=False, help_text='Check to display the image caption in the footer.', verbose_name='Show caption in footer'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='fullbleed_feature',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='fullbleed_feature',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='headline',
            name='fullbleed_feature',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='fullbleed_feature',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='articlelistpage',
            name='theme',
            field=models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme'),
        ),
        migrations.AddField(
            model_name='serieslistpage',
            name='theme',
            field=models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme'),
        ),
        migrations.AddField(
            model_name='topiclistpage',
            name='theme',
            field=models.ForeignKey(default=themes.models.get_default_theme, null=True, on_delete=django.db.models.deletion.SET_NULL, to='themes.Theme'),
        ),
        migrations.RunPython(
            code=articles.migrations.0066_assign_theme_to_pages.set_themes,
        ),
        migrations.RemoveField(
            model_name='chapteredarticlepage',
            name='articlepage_ptr',
        ),
        migrations.DeleteModel(
            name='ChapteredArticlePage',
        ),
        migrations.RunPython(
            code=articles.migrations.0068_auto_20151006_2148.set_themes,
        ),
        migrations.CreateModel(
            name='BackgroundImageBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('position', models.CharField(choices=[('left top', 'left top'), ('left center', 'left center'), ('left bottom', 'left bottom'), ('right top', 'right top'), ('right center', 'right center'), ('right bottom', 'right bottom'), ('center top', 'center top'), ('center center', 'center center'), ('center bottom', 'center bottom')], default='left top', max_length=20)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='images.AttributedImage')),
                ('article', modelcluster.fields.ParentalKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='background_image_links', to='articles.ArticlePage')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'abstract': False,
                'ordering': ['sort_order'],
            },
        ),
        migrations.AddField(
            model_name='articlepage',
            name='slippery',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='slippery_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='slippery',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='slippery_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='slippery',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='slippery_for_type_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='feature_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='feature_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='images.AttributedImage'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='video_document',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='video_document',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='video',
            field=models.BooleanField(default=False),
        ),
        migrations.RemoveField(
            model_name='articlepage',
            name='image_overlay_color',
        ),
        migrations.RemoveField(
            model_name='externalarticlepage',
            name='image_overlay_color',
        ),
        migrations.RemoveField(
            model_name='headline',
            name='image_overlay_color',
        ),
        migrations.RemoveField(
            model_name='seriespage',
            name='image_overlay_color',
        ),
        migrations.RemoveField(
            model_name='fontstyle',
            name='text_colour',
        ),
        migrations.RemoveField(
            model_name='articlepage',
            name='font_style',
        ),
        migrations.RemoveField(
            model_name='externalarticlepage',
            name='font_style',
        ),
        migrations.RemoveField(
            model_name='headline',
            name='font_style',
        ),
        migrations.RemoveField(
            model_name='seriespage',
            name='font_style',
        ),
        migrations.DeleteModel(
            name='Colour',
        ),
        migrations.DeleteModel(
            name='FontStyle',
        ),
        migrations.AddField(
            model_name='articlepage',
            name='title_size',
            field=models.CharField(choices=[('small', 'Smaller'), ('medium', 'Medium (default 50px)'), ('large', 'Larger')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='externalarticlepage',
            name='title_size',
            field=models.CharField(choices=[('small', 'Smaller'), ('medium', 'Medium (default 50px)'), ('large', 'Larger')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='headline',
            name='title_size',
            field=models.CharField(choices=[('small', 'Smaller'), ('medium', 'Medium (default 50px)'), ('large', 'Larger')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='title_size',
            field=models.CharField(choices=[('small', 'Smaller'), ('medium', 'Medium (default 50px)'), ('large', 'Larger')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='json_file',
            field=articles.fields.WagtailFileField(blank=True, help_text='Only provide if you know your template will be filled with the contents of a JSON data file.', max_length=255, null=True, upload_to=b'', verbose_name='JSON file'),
        ),
        migrations.AddField(
            model_name='articlepage',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.ProjectPage'),
        ),
        migrations.AddField(
            model_name='seriespage',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.ProjectPage'),
        ),
        migrations.CreateModel(
            name='ResponseArticleLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_to_links', to='articles.ArticlePage')),
                ('response_to', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_links', to='articles.ArticlePage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='articlepage',
            name='json_file',
            field=articles.fields.WagtailFileField(blank=True, help_text='Only provide if you know your template will be filled with the contents of a JSON data file.', max_length=255, null=True, upload_to='', verbose_name='JSON file'),
        ),
    ]
